{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-6c38b8f20717028e6e2faa55fab1310e",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\nimport { createFeatureSelector } from '@ngrx/store';\nimport { ILink } from '../store/model/user';\n\nexport interface AppState {\n  authState: auth.State;\n  link: auth.State;\n}\n\nexport const reducers = {\n  auth: auth.reducer,\n  link: auth.reducer,\n};\n\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\nexport const selectLinkState = createFeatureSelector<AppState>('auth');\n\nexport default class LinkState {\n  Link: Array<ILink>;\n}\n\nexport const initializeState = (): LinkState => {\n  return { Link: Array<ILink>() };\n};\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "link",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILink",
            "id": "interface-ILink-e9cece5e636c276eadbf77f7b4db3838",
            "file": "src/app/store/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface IUser {\n  username?: string;\n  password?: string;\n}\n\nexport interface ILink {\n  id?: string;\n  linksTitle?: string;\n  description?: string;\n  category?: string;\n}\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "linksTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-e9cece5e636c276eadbf77f7b4db3838",
            "file": "src/app/store/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface IUser {\n  username?: string;\n  password?: string;\n}\n\nexport interface ILink {\n  id?: string;\n  linksTitle?: string;\n  description?: string;\n  category?: string;\n}\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-bf7fc5f74a80bb3b74d2e17912ac452d",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { IUser, ILink } from '../model/user';\nimport {\n  AuthActionTypes,\n  All,\n  LIST_LINKS,\n  ADD_LINKS,\n  UPDATE_LINKS,\n  DELETE_LINKS,\n  LIST_DATA_SUCCESS,\n  ADD_LINKS_SUCCESS,\n  DELETE_LINKS_SUCCESS,\n  UPDATE_LINKS_SUCCESS,\n} from '../actions/auth.action';\n\nexport interface State {\n  // is a user authenticated?\n  isAuthenticated: boolean;\n  // if authenticated, there should be a user object\n  user: IUser | null;\n  // error message\n  errorMessage: string | null;\n  links: ILink[];\n  added: boolean | null;\n  updated: boolean | null;\n  deleted: boolean | null;\n  loaded: boolean | null;\n}\n\nexport const initialState: State = {\n  isAuthenticated: false,\n  user: null,\n  errorMessage: null,\n  links: [],\n  added: null,\n  updated: null,\n  loaded: null,\n  deleted: null,\n};\n\nexport function reducer(state = initialState, action: All): State {\n  switch (action.type) {\n    case AuthActionTypes.LOGIN_SUCCESS: {\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: {\n          username: action.payload.username,\n          password: action.payload.password,\n        },\n        errorMessage: null,\n      };\n    }\n    case AuthActionTypes.LOGIN_FAILURE: {\n      return {\n        ...state,\n        errorMessage: 'Incorrect email and/or password.',\n      };\n    }\n    case AuthActionTypes.SIGNUP_SUCCESS: {\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: {\n          username: action.payload.username,\n        },\n        errorMessage: null,\n      };\n    }\n    case AuthActionTypes.LOGOUT: {\n      return initialState;\n    }\n    case ADD_LINKS: {\n      return {\n        ...state,\n      };\n    }\n    case LIST_LINKS: {\n      return {\n        ...state,\n      };\n    }\n    case DELETE_LINKS: {\n      return {\n        ...state,\n      };\n    }\n    case UPDATE_LINKS: {\n      return {\n        ...state,\n      };\n    }\n    case LIST_DATA_SUCCESS: {\n      return {\n        ...state,\n        links: [...action.payload],\n        errorMessage: null,\n        loaded: true,\n      };\n    }\n    case ADD_LINKS_SUCCESS: {\n      return {\n        ...state,\n        errorMessage: 'The Links is added successfully!',\n        added: true,\n      };\n    }\n    case DELETE_LINKS_SUCCESS: {\n      return {\n        ...state,\n      };\n    }\n    case UPDATE_LINKS_SUCCESS: {\n      return {\n        ...state,\n        errorMessage: 'The Links is updated successfully!',\n        added: true,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "added",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "deleted",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "links",
                    "type": "ILink[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loaded",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "updated",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "user",
                    "type": "IUser | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-6e330c72f70c74c61c0500801a1efd8f",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "AddLinks",
                    "defaultValue": "this.actions.pipe(\n    ofType(ADD_LINKS),\n    map((action: AddLinks) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService.addLink(payload).pipe(\n        map((data) => {\n          if (data) {\n            return new AddLinksSuccess(data);\n          }\n        })\n      );\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteLinks",
                    "defaultValue": "this.actions.pipe(\n    ofType(DELETE_LINKS),\n    map((action: DeleteLinks) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService.deleteLinksById(payload).pipe(\n        map((data) => {\n          if (data) {\n            window.alert('Link Deleted Successfully');\n            return new DeleteLinksSuccess();\n          }\n        })\n      );\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListLinks",
                    "defaultValue": "this.actions.pipe(\n    ofType(LIST_LINKS),\n    map((action: ListLinks) => action),\n    mergeMap(() => {\n      return this.linksListService\n        .getLinks()\n        .pipe(map((data) => new ListDataSuccess(data)));\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_FAILURE),\n    tap(() => {\n      alert('Please Enter Valid User Name and Password');\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\n    tap((user) => {\n      localStorage.setItem('token', user.payload.username);\n      this.router.navigate(['/list', { term: true }]);\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGOUT),\n    tap(() => {\n      window.alert('You are Logout Successfully');\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP),\n    map((action: SignUp) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService\n        .addLogin(payload)\n        .pipe(\n          map((data) => {\n            if (data) {\n              window.alert('User Added Successfully');\n              return new SignUpSuccess(data);\n            }\n          })\n        )\n        .pipe(\n          catchError(() => {\n            return of(new SignUpFailure({ error: 'error' }));\n          })\n        );\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateLinks",
                    "defaultValue": "this.actions.pipe(\n    ofType(UPDATE_LINKS),\n    map((action: UpdateLinks) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService.updateLink(payload).pipe(\n        map((data) => {\n          if (data) {\n            window.alert('Link Updated Successfully');\n            return new UpdateLinksSuccess(data);\n          }\n        })\n      );\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { tap, map, catchError, mergeMap } from 'rxjs/operators';\nimport {\n  AuthActionTypes,\n  SignUp,\n  SignUpSuccess,\n  SignUpFailure,\n  LIST_LINKS,\n  ListDataSuccess,\n  ADD_LINKS,\n  AddLinksSuccess,\n  AddLinks,\n  DeleteLinksSuccess,\n  DELETE_LINKS,\n  DeleteLinks,\n  UPDATE_LINKS,\n  UpdateLinks,\n  UpdateLinksSuccess,\n  ListLinks,\n} from '../actions/auth.action';\nimport { LinksListService } from 'src/app/service/sports.service';\n\n@Injectable()\nexport class AuthEffects {\n  constructor(\n    private actions: Actions,\n    private router: Router,\n    private linksListService: LinksListService\n  ) {}\n\n  // effects go here\n  @Effect({ dispatch: false })\n  LogInSuccess: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\n    tap((user) => {\n      localStorage.setItem('token', user.payload.username);\n      this.router.navigate(['/list', { term: true }]);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  LogInFailure: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_FAILURE),\n    tap(() => {\n      alert('Please Enter Valid User Name and Password');\n    })\n  );\n\n  @Effect({ dispatch: false })\n  LogOut: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGOUT),\n    tap(() => {\n      window.alert('You are Logout Successfully');\n    })\n  );\n\n  @Effect({ dispatch: true })\n  SignUp: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP),\n    map((action: SignUp) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService\n        .addLogin(payload)\n        .pipe(\n          map((data) => {\n            if (data) {\n              window.alert('User Added Successfully');\n              return new SignUpSuccess(data);\n            }\n          })\n        )\n        .pipe(\n          catchError(() => {\n            return of(new SignUpFailure({ error: 'error' }));\n          })\n        );\n    })\n  );\n\n  @Effect({ dispatch: true })\n  ListLinks: Observable<any> = this.actions.pipe(\n    ofType(LIST_LINKS),\n    map((action: ListLinks) => action),\n    mergeMap(() => {\n      return this.linksListService\n        .getLinks()\n        .pipe(map((data) => new ListDataSuccess(data)));\n    })\n  );\n\n  @Effect({ dispatch: true })\n  AddLinks: Observable<any> = this.actions.pipe(\n    ofType(ADD_LINKS),\n    map((action: AddLinks) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService.addLink(payload).pipe(\n        map((data) => {\n          if (data) {\n            return new AddLinksSuccess(data);\n          }\n        })\n      );\n    })\n  );\n\n  @Effect({ dispatch: true })\n  DeleteLinks: Observable<any> = this.actions.pipe(\n    ofType(DELETE_LINKS),\n    map((action: DeleteLinks) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService.deleteLinksById(payload).pipe(\n        map((data) => {\n          if (data) {\n            window.alert('Link Deleted Successfully');\n            return new DeleteLinksSuccess();\n          }\n        })\n      );\n    })\n  );\n\n  @Effect({ dispatch: true })\n  UpdateLinks: Observable<any> = this.actions.pipe(\n    ofType(UPDATE_LINKS),\n    map((action: UpdateLinks) => action.payload),\n    mergeMap((payload) => {\n      return this.linksListService.updateLink(payload).pipe(\n        map((data) => {\n          if (data) {\n            window.alert('Link Updated Successfully');\n            return new UpdateLinksSuccess(data);\n          }\n        })\n      );\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "linksListService",
                        "type": "LinksListService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linksListService",
                        "type": "LinksListService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LinksListService",
            "id": "injectable-LinksListService-4a86d71c94963a47283aaaf96be260d5",
            "file": "src/app/service/sports.service.ts",
            "properties": [
                {
                    "name": "baseRefUrl",
                    "defaultValue": "environment.baseRefUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLogin",
                    "args": [
                        {
                            "name": "userLogin",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "userLogin",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteLinksById",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "getLoginCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "updateLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LinksListService {\n  public baseRefUrl = environment.baseRefUrl;\n\n  constructor(private http: HttpClient) {}\n\n  getLinks(): Observable<any> {\n    return this.http.get(`${this.baseRefUrl}/` + 'data');\n  }\n\n  addLink(link: any): Observable<any> {\n    return this.http.post(`${this.baseRefUrl}/` + 'data', link);\n  }\n\n  deleteLinksById(id: any): Observable<any> {\n    return this.http.delete(`${this.baseRefUrl}/` + 'data/' + id);\n  }\n\n  updateLink(link: any): Observable<any> {\n    return this.http.put(`${this.baseRefUrl}/` + 'data/' + link.id, link);\n  }\n\n  getLoginCheck(): Observable<any> {\n    return this.http.get(`${this.baseRefUrl}/` + 'login');\n  }\n\n  addLogin(userLogin: any): Observable<any> {\n    return this.http.post(`${this.baseRefUrl}/` + 'login', userLogin);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddLinks",
            "id": "class-AddLinks-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_LINKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddLinksSuccess",
            "id": "class-AddLinksSuccess-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_LINKS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteLinks",
            "id": "class-DeleteLinks-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_LINKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteLinksSuccess",
            "id": "class-DeleteLinksSuccess-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_LINKS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FooterElement",
            "id": "class-FooterElement-45b209a02e857f5c091b2b6de9db9192",
            "file": "src/app/components/lit-Elements/footer.element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, customElement, css } from 'lit-element';\n\n@customElement('footer-element')\nexport class FooterElement extends LitElement {\n  constructor() {\n    super();\n  }\n\n  static get styles(): any {\n    return css`\n      p {\n        color: white;\n        margin: 14px 0px 0px 410px;\n      }\n    `;\n  }\n\n  render(): any {\n    return html`<p>@Links Club</p>`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 4
            },
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "any",
                        "returnType": "any",
                        "line": 9
                    }
                }
            }
        },
        {
            "name": "HeaderTitleElement",
            "id": "class-HeaderTitleElement-10f7c6a0f67fa14e181008c5a562d717",
            "file": "src/app/components/lit-Elements/heading-element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, html, css, customElement, property } from 'lit-element';\n\nconst mainColor = css`white`;\n@customElement('title-element')\nexport class HeaderTitleElement extends LitElement {\n  @property() name: any;\n\n  static get styles(): any {\n    return css`\n      h3 {\n        color: ${mainColor};\n        margin: 19px;\n      }\n    `;\n  }\n\n  render(): any {\n    return html`<h3>Links</h3>`;\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "any",
                        "returnType": "any",
                        "line": 8
                    }
                }
            }
        },
        {
            "name": "LinkState",
            "id": "class-LinkState-6c38b8f20717028e6e2faa55fab1310e",
            "file": "src/app/store/app.states.ts",
            "type": "class",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\nimport { createFeatureSelector } from '@ngrx/store';\nimport { ILink } from '../store/model/user';\n\nexport interface AppState {\n  authState: auth.State;\n  link: auth.State;\n}\n\nexport const reducers = {\n  auth: auth.reducer,\n  link: auth.reducer,\n};\n\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\nexport const selectLinkState = createFeatureSelector<AppState>('auth');\n\nexport default class LinkState {\n  Link: Array<ILink>;\n}\n\nexport const initializeState = (): LinkState => {\n  return { Link: Array<ILink>() };\n};\n",
            "properties": [
                {
                    "name": "Link",
                    "type": "Array<ILink>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ListDataSuccess",
            "id": "class-ListDataSuccess-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any[]"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListLinks",
            "id": "class-ListLinks-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_LINKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLinks",
            "id": "class-UpdateLinks-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_LINKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLinksSuccess",
            "id": "class-UpdateLinksSuccess-7ae26e9262b636fadcdbf423121a2273",
            "file": "src/app/store/actions/auth.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Sighup',\n  SIGNUP_SUCCESS = '[Auth] Sighup Success',\n  SIGNUP_FAILURE = '[Auth] Sighup Failure',\n  LOGOUT = '[Auth] Logout',\n}\n\nexport const LIST_LINKS = '[Links] Fetch link';\nexport const ADD_LINKS = '[Links] Add link';\nexport const UPDATE_LINKS = '[Links] Update link';\nexport const DELETE_LINKS = '[Links] Delete link';\nexport const LIST_DATA_SUCCESS = '[Links] List Success';\nexport const ADD_LINKS_SUCCESS = '[Links] Add link success';\nexport const DELETE_LINKS_SUCCESS = '[Links] Delete link success';\nexport const UPDATE_LINKS_SUCCESS = '[Links] Update link success';\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class ListLinks implements Action {\n  readonly type = LIST_LINKS;\n}\n\nexport class ListDataSuccess implements Action {\n  readonly type = LIST_DATA_SUCCESS;\n  constructor(public payload: any[]) {}\n}\n\nexport class AddLinks implements Action {\n  readonly type = ADD_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class AddLinksSuccess implements Action {\n  readonly type = ADD_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinks implements Action {\n  readonly type = UPDATE_LINKS;\n  constructor(public payload: any) {}\n}\n\nexport class UpdateLinksSuccess implements Action {\n  readonly type = UPDATE_LINKS_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class DeleteLinks implements Action {\n  readonly type = DELETE_LINKS;\n  constructor(public payload: string) {}\n}\n\nexport class DeleteLinksSuccess implements Action {\n  readonly type = DELETE_LINKS_SUCCESS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | SignUp\n  | SignUpSuccess\n  | SignUpFailure\n  | LogOut\n  | ListLinks\n  | ListDataSuccess\n  | AddLinks\n  | AddLinksSuccess\n  | UpdateLinks\n  | UpdateLinksSuccess\n  | DeleteLinks\n  | DeleteLinksSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_LINKS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddLinksComponent",
            "id": "component-AddLinksComponent-77946e1d54f66792e75a4c4da3728f5d",
            "file": "src/app/components/links/add-links/addlinks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-links",
            "styleUrls": [
                "./addlinks.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./addlinks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addLinksTitle",
                    "defaultValue": "'Add Links'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "linksData",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "linksForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "linksId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showUpdateForm",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateLinkTitle",
                    "defaultValue": "'Update Link'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "isRegisterFormToUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "link",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdateLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AddLinks } from 'src/app/store/actions/auth.action';\nimport { AppState, selectAuthState } from 'src/app/store/app.states';\nimport { ListLinks, UpdateLinks } from '../../../store/actions/auth.action';\n@Component({\n  selector: 'app-add-links',\n  templateUrl: './addlinks.component.html',\n  styleUrls: ['./addlinks.component.css'],\n})\nexport class AddLinksComponent implements OnInit {\n  public linksForm: any;\n  public linksData: Array<any>;\n  public linksId: number;\n  public showUpdateForm: boolean;\n  public addLinksTitle = 'Add Links';\n  public updateLinkTitle = 'Update Link';\n  getState: Observable<any>;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private store: Store<AppState>\n  ) {\n    this.linksForm = this.fb.group({\n      id: [0, [Validators.required]],\n      linksTitle: ['', [Validators.required]],\n      category: ['', [Validators.required]],\n      description: ['', [Validators.required, Validators.maxLength]],\n    });\n\n    this.activatedRoute.params.subscribe((param) => {\n      this.linksId = param.id;\n    });\n\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getLinks();\n    this.isRegisterFormToUpdate();\n  }\n\n  getLinks(): void {\n    this.store.dispatch(new ListLinks());\n    this.store.subscribe((data) => {\n      if (data && data.link && data.link.links) {\n        this.linksData = data.link.links;\n      }\n    });\n  }\n\n  onSubmit(link: any): void {\n    this.store.dispatch(new AddLinks(link));\n    this.store.dispatch(new ListLinks());\n    this.router.navigate(['/list', { term: true }]);\n  }\n\n  isRegisterFormToUpdate(): void {\n    if (this.linksId === undefined) {\n      this.showUpdateForm = false;\n    } else {\n      this.showUpdateForm = true;\n    }\n  }\n\n  onUpdateLink(link: any): void {\n    this.store.dispatch(new UpdateLinks(link));\n    this.store.dispatch(new ListLinks());\n    this.router.navigate(['/list', { term: true }]);\n  }\n\n  openList(): void {\n    this.router.navigate(['/list', { term: true }]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* .grid-container {\n    width: 80%;\n    margin-top: 50px;\n    margin-left: 115px;\n}\n\n.form {\n    display: grid;\n    grid-template-columns: [labels] auto [controls] 1fr;\n    grid-auto-flow: row;\n    grid-gap: .8em;\n    background: #eee;\n    padding: 1.2em;\n}\n\n.myForm > label  {\n    grid-column: controls;\n    grid-row: auto;\n}\n\n.myForm > input {\n    grid-column: controls;\n    grid-row: auto;\n    border: none;\n    padding: 1em;\n}\n\n.myForm > button {\n    grid-row: controls;\n    grid-row: auto;\n    border: none;\n    padding: 1em;\n}\n\n.button {\n    margin: 8px;\n    padding: 2px 10px 2px 10px;\n}\n\n.div2 {\n    background: lightseagreen;\n}\n\n*{  margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    text-align: center;\n    font-family: '',\n    cursive;\n}\n\n.login {\n    background-color: lightseagreen;\n    padding: 11px;\n} */\n",
                    "styleUrl": "./addlinks.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\" *ngIf=\"showUpdateForm == false\">\n  <div class=\"login\">\n    <p tabindex=\"0\">{{ addLinksTitle }}</p>\n  </div>\n  <div>\n    <form [formGroup]=\"linksForm\" class=\"form\">\n      <label for=\"id\">ID :</label>\n      <input\n        type=\"text\"\n        formControlName=\"id\"\n        id=\"id\"\n        aria-label=\"ID\"\n        autocomplete=\"off\"\n      />\n\n      <label for=\"linksTitle\">Links Title :</label>\n      <input\n        type=\"text\"\n        formControlName=\"linksTitle\"\n        placeholder=\"Enter Link Name\"\n        aria-label=\"Links Title\"\n        id=\"linksTitle\"\n        autocomplete=\"off\"\n      />\n\n      <label for=\"category\">Category :</label>\n      <input\n        type=\"text\"\n        formControlName=\"category\"\n        placeholder=\"Individual or Team Player\"\n        aria-label=\"Category\"\n        id=\"category\"\n        autocomplete=\"off\"\n      />\n\n      <label for=\"description\">Description :</label>\n      <textarea\n        formControlName=\"description\"\n        id=\"description\"\n        placeholder=\"Enter Description\"\n        aria-label=\"Description\"\n        maxlength=\"500\"\n        autocomplete=\"off\"\n      ></textarea>\n    </form>\n  </div>\n  <div class=\"div2\">\n    <button\n      type=\"button\"\n      class=\"button\"\n      tabindex=\"0\"\n      (click)=\"onSubmit(linksForm.value)\"\n      [disabled]=\"linksForm.invalid\"\n    >\n      Submit\n    </button>\n    <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"openList()\">\n      Home\n    </button>\n  </div>\n</div>\n<div class=\"grid-container\" *ngIf=\"showUpdateForm == true\">\n  <ng-container *ngFor=\"let param of linksData\">\n    <ng-container *ngIf=\"param.id === linksId\">\n      <div class=\"login\">\n        <p tabindex=\"0\">{{ updateLinkTitle }}</p>\n      </div>\n      <div>\n        <form [formGroup]=\"linksForm\" class=\"form\">\n          <label for=\"id\">ID :</label>\n          <input\n            type=\"text\"\n            formControlName=\"id\"\n            id=\"id\"\n            aria-label=\"ID\"\n            name=\"id\"\n            [ngModel]=\"param.id\"\n            autocomplete=\"off\"\n            disabled\n          />\n\n          <label for=\"linksTitle\">Links Title :</label>\n          <input\n            type=\"text\"\n            formControlName=\"linksTitle\"\n            id=\"linksTitle\"\n            aria-label=\"Links Title\"\n            [ngModel]=\"param.linksTitle\"\n            autocomplete=\"off\"\n          />\n\n          <label for=\"category\">Category :</label>\n          <input\n            type=\"text\"\n            formControlName=\"category\"\n            id=\"category\"\n            aria-label=\"Category\"\n            [ngModel]=\"param.category\"\n            autocomplete=\"off\"\n          />\n\n          <label for=\"description\">Description :</label>\n          <textarea\n            formControlName=\"description\"\n            id=\"description\"\n            aria-label=\"Description\"\n            [ngModel]=\"param.description\"\n            maxlength=\"500\"\n            autocomplete=\"off\"\n          ></textarea>\n        </form>\n      </div>\n      <div class=\"div2\">\n        <button\n          type=\"button\"\n          class=\"button\"\n          tabindex=\"0\"\n          (click)=\"onUpdateLink(linksForm.value)\"\n          [disabled]=\"linksForm.invalid\"\n        >\n          Submit\n        </button>\n        <button type=\"button\" class=\"button\" tabindex=\"0\" (click)=\"openList()\">\n          Home\n        </button>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6d335cbb16d465a6d7b79db8ff3063c2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Links'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "receiveMode",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  public title = 'Links';\n  public currTheme = false;\n\n  constructor() {}\n  ngOnInit(): void {}\n\n  receiveMode(event: boolean): void {\n    this.currTheme = event;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"content\"\n  [ngClass]=\"currTheme ? 'application-theme' : 'application'\"\n>\n  <app-header (mode)=\"receiveMode($event)\"></app-header>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-d4de3e13af6b43a0ed93d9a1c8a69b0d-1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "mode",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "setDark",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userLoginStatus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.states';\nimport { LogOut } from 'src/app/store/actions/auth.action';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css'],\n})\nexport class HeaderComponent implements OnInit {\n  public userLoginStatus: boolean;\n  public setDark = false;\n  @Output() mode = new EventEmitter<boolean>();\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private store: Store<AppState>\n  ) {}\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(\n      (param) => {\n        this.userLoginStatus = param.term;\n      },\n      (error) => {\n        console.log('Error in Fetching Parameter of Login API');\n      }\n    );\n  }\n\n  register(): void {\n    this.router.navigate(['/registermodule']);\n  }\n\n  logout(): void {\n    this.store.dispatch(new LogOut());\n    this.router.navigate(['/login']);\n  }\n\n  changeTheme(): void {\n    this.setDark = !this.setDark;\n    this.mode.emit(this.setDark);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pointer {\n  cursor: pointer;\n}\n\n.topnav {\n  overflow: auto;\n  background-color: #2196f3 !important;\n  width: 100%;\n}\n\n.topnav a {\n  float: left;\n  color: #f2f2f2;\n  text-align: center;\n  padding: 10px 10px;\n  text-decoration: none;\n}\n\n.topnav a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n.topnav a.active {\n  background-color: #adaf4c;\n  color: white;\n}\n\n.topnav-right {\n  float: right;\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"topnav\" aria-label=\"Toggle navigation\">\n  <a\n    aria-label=\"Aative Link Home\"\n    class=\"active\"\n    [routerLink]=\"['/']\"\n    routerLinkActive=\"router-link-active\"\n    >Home</a\n  >\n  <!--   <a href=\"#news\">News</a>-->\n  <a class=\"pointer\" (click)=\"changeTheme()\">Toggle Theme</a>\n  <div class=\"topnav-right\">\n    <a\n      *ngIf=\"!userLoginStatus\"\n      [routerLink]=\"['/login']\"\n      routerLinkActive=\"router-link-active\"\n      >Sign in</a\n    >\n    <a *ngIf=\"userLoginStatus\">Welcome </a>\n    <a [routerLink]=\"['/registermodule']\" routerLinkActive=\"router-link-active\"\n      >Sign up</a\n    >\n  </div>\n</div>\n"
        },
        {
            "name": "LinksComponent",
            "id": "component-LinksComponent-9d662527155de7a27c60b0c417556fbb",
            "file": "src/app/components/links/links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "LinksListService"
                }
            ],
            "selector": "app-listing-page",
            "styleUrls": [
                "./links.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "headerTitle",
                    "defaultValue": "'Links'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "linksData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginData",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tableTitle",
                    "defaultValue": "'Links details'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userLoginStatus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "deleteLinks",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "updateLinks",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ListLinks } from './../../store/actions/auth.action';\nimport { LinksListService } from './../../service/sports.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState, selectAuthState } from 'src/app/store/app.states';\nimport { DeleteLinks } from '../../store/actions/auth.action';\n\n@Component({\n  selector: 'app-listing-page',\n  templateUrl: './links.component.html',\n  styleUrls: ['./links.component.css'],\n  providers: [LinksListService],\n})\nexport class LinksComponent implements OnInit {\n  public headerTitle = 'Links';\n  public loginData: Array<any> = [];\n  public linksData = [];\n  public userLoginStatus = false;\n  public tableTitle = 'Links details';\n  getState: Observable<any>;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private store: Store<AppState>\n  ) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new ListLinks());\n    this.store.subscribe((data) => {\n      if (data && data.link && data.link.links) {\n        this.linksData = data.link.links;\n      }\n    });\n\n    this.activatedRoute.params.subscribe(\n      (param) => {\n        this.userLoginStatus = param.term;\n      },\n      (error) => {\n        console.log('Error in Fetch Route Parameter');\n      }\n    );\n  }\n\n  updateLinks(id: any): void {\n    this.router.navigate(['/addLinks', id]);\n  }\n\n  deleteLinks(id: any): void {\n    if (confirm('Are you sure to delete Link')) {\n      this.store.dispatch(new DeleteLinks(id));\n      this.store.dispatch(new ListLinks());\n    } else {\n    }\n  }\n\n  addLinks(): void {\n    this.router.navigate(['/addLinks']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\n  padding: 0px 0px 0px 5px;\n}\n\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n  color: black;\n  font-size: 11px;\n\n}\n\nth {\n  color: #2196f3;\n  background-color: #f2f9fe !important;\n  border: 1px solid #dddddd;\n  height: 50px;\n}\n\ntd {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 4px;\n  width: auto;\n  max-width: 100px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  height: 30px;\n}\n\ntr:nth-child(odd) {\n  background-color: #a6d4fa;\n}\n\n.heading {\n  color: #2196f3 !important;\n  padding: 4px;\n  margin-top: 0px;\n  color: white;\n}\n\n.button {\n  padding: 6px 15px;\n  margin-right: 10px;\n}\n\n.add {\n  margin-top: 21px;\n  margin-bottom: 0px;\n}\n\n.table-bottom {\n  display: inline-flex;\n}\n\n.add-button {\n  margin-left: 646px;\n  padding: 4px;\n}\n\n.crud-btns {\n  text-decoration: underline;\n  margin: 5px;\n}\n\n.container {\n  padding: 0 0 0 8%;\n  width: 100%;\n\n}\n\n.containers {\n  padding: 0 0 0 8%;\n  width: 100%;\n\n}\n\n@media only screen and (max-width: 600px) {\n  table {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 100%;\n    font-size: 11px;\n  }\n\n  td,\n  th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 4px;\n    width: auto;\n  }\n\n  tr:nth-child(even) {\n    background-color: #dddddd;\n    width: auto;\n  }\n}\n",
                    "styleUrl": "./links.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div>\n  <title-element tabindex=\"0\" name=\"{{ headerTitle }}\"></title-element>\n</div> -->\n<div class=\"list\">\n  <table>\n    <caption attr.aria-label=\"tableTitle\">\n      <div>\n        <h2 class=\"heading\" tabindex=\"0\">\n          {{ tableTitle }}\n        </h2>\n      </div>\n    </caption>\n    <tr>\n      <th tabindex=\"1\">Sr. No.</th>\n      <th tabindex=\"2\">Link Title</th>\n      <th tabindex=\"3\">Description</th>\n      <th tabindex=\"4\">Category</th>\n      <th tabindex=\"5\">Actions</th>\n    </tr>\n    <tr *ngFor=\"let item of linksData; let i = index\">\n      <td tabindex=\"i\">{{ item.id }}</td>\n      <td tabindex=\"i\">{{ item.title }}</td>\n      <td tabindex=\"i\">{{ item.desc }}</td>\n      <td tabindex=\"i\">{{ item.categories }}</td>\n      <td tabindex=\"i\">\n        <span class=\"crud-btns\">\n          Update\n        </span>\n        <span>|</span>\n        <span class=\"crud-btns\">\n          Delete\n        </span>\n        <!-- <button\n          type=\"button\"\n          tabindex=\"0\"\n          aria-label=\"Update\"\n          [disabled]=\"!userLoginStatus\"\n          class=\"button\"\n          (click)=\"updateSports(item.id)\"\n        >\n          Update\n        </button> -->\n        <!-- <button\n          type=\"button\"\n          tabindex=\"0\"\n          aria-label=\"Delete\"\n          [disabled]=\"!userLoginStatus\"\n          class=\"button\"\n          (click)=\"deleteSports(item.id)\"\n        >\n          Delete\n        </button> -->\n      </td>\n    </tr>\n  </table>\n  <!-- <div class=\"add\">\n    <div class=\"table-bottom\">\n      <button\n        type=\"button\"\n        tabindex=\"0\"\n        aria-label=\"Add Sport\"\n        class=\"add-button\"\n        [disabled]=\"!userLoginStatus\"\n        (click)=\"addSports()\"\n      >\n        Add Sport\n      </button>\n      <footer-element></footer-element>\n    </div>\n  </div> -->\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-54d53b71ce99cc7800f8a741ed045b31",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispatchAction",
                    "args": [
                        {
                            "name": "credentials",
                            "type": ""
                        },
                        {
                            "name": "isLogin",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isLogin",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { LinksListService } from 'src/app/service/sports.service';\nimport { AppState } from 'src/app/store/app.states';\nimport { LogInSuccess, LogInFailure } from 'src/app/store/actions/auth.action';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  public loginForm: any;\n  public isLogin: boolean;\n\n  constructor(\n    private fb: FormBuilder,\n    private linkService: LinksListService,\n    private router: Router,\n    private store: Store<AppState>\n  ) {}\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(credentials: any): void {\n    this.linkService.getLoginCheck().subscribe(\n      (checklogin) => {\n        if (credentials && checklogin) {\n          const login = checklogin;\n          for (let i = 0; i <= login.length - 1; i++) {\n            if (login[i].username === credentials.username) {\n              this.isLogin = true;\n              this.router.navigate(['/list', { term: true }]);\n              alert(`${credentials.username} Login Successfully`);\n              this.dispatchAction(credentials, true);\n              break;\n            } else {\n              this.isLogin = false;\n            }\n          }\n        }\n        if (this.isLogin === false) {\n          this.dispatchAction(credentials, false);\n        }\n      },\n      (error) => {\n        console.log('Error in Fetching Login API');\n      }\n    );\n  }\n\n  dispatchAction(credentials, isLogin?): void {\n    const payload = {\n      username: credentials.username,\n      password: credentials.password,\n    };\n    if (isLogin) {\n      (document.getElementById('logout-button') as any).disabled = false;\n      this.store.dispatch(new LogInSuccess(payload));\n    } else {\n      (document.getElementById('logout-button') as any).disabled = true;\n      this.store.dispatch(new LogInFailure(payload));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form {\n  display: grid;\n  grid-template-columns: [labels] auto [controls] 1fr;\n  grid-auto-flow: row;\n  grid-gap: .8em;\n  background: #eee;\n  padding: 1.2em;\n}\n\n.myForm>label {\n  grid-column: controls;\n  grid-row: auto;\n}\n\n.myForm>input {\n  grid-column: controls;\n  grid-row: auto;\n  border: none;\n  padding: 1em;\n}\n\n.myForm>button {\n  grid-row: controls;\n  grid-row: auto;\n  border: none;\n  padding: 1em;\n}\n\n.button {\n  margin: 8px;\n  padding: 3px 10px 3px 10px;\n  color: #673ab7;\n}\n\n.div2 {\n  background: lightseagreen;\n}\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "linkService",
                        "type": "LinksListService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkService",
                        "type": "LinksListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\n  <div class=\"login\">\n    <p tabindex=\"0\">Login</p>\n  </div>\n  <div>\n    <form [formGroup]=\"loginForm\" class=\"form\">\n      <label for=\"username\">User Name :</label>\n      <input\n        type=\"text\"\n        formControlName=\"username\"\n        id=\"username\"\n        placeholder=\"Please Enter Name\"\n        aria-label=\"Username\"\n        autocomplete=\"off\"\n      />\n\n      <label for=\"password\">Password :</label>\n      <input\n        type=\"password\"\n        formControlName=\"password\"\n        placeholder=\"Please Enter Password\"\n        aria-label=\"Password\"\n        id=\"password\"\n        autocomplete=\"off\"\n      />\n    </form>\n  </div>\n  <div class=\"div2\">\n    <button\n      type=\"button\"\n      class=\"button\"\n      tabindex=\"0\"\n      (click)=\"onSubmit(loginForm.value)\"\n      [disabled]=\"loginForm.invalid\"\n      aria-label=\"Submit Login Form\"\n    >\n      Submit\n    </button>\n    <button class=\"button\" type=\"reset\">Reset</button>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-ef77860a9d59978e99ae6a95c45898a5",
            "file": "src/app/components/registration/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "LinksData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "registerForm",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "register",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "register",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.states';\nimport { SignUp } from 'src/app/store/actions/auth.action';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent {\n  public registerForm: any;\n  public LinksData: any;\n\n  constructor(private fb: FormBuilder, private store: Store<AppState>) {\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(register: any): void {\n    const payload = {\n      username: register.username,\n      password: register.password,\n    };\n    this.store.dispatch(new SignUp(payload));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".forms {\n  display: grid;\n  grid-template-columns: [labels] auto [controls] 1fr;\n  grid-auto-flow: row;\n  grid-gap: .8em;\n  background: #eee;\n  padding: 1.2em;\n}\n\n.myForm>label {\n  grid-column: controls;\n  grid-row: auto;\n}\n\n.myForm>input {\n  grid-column: controls;\n  grid-row: auto;\n  border: none;\n  padding: 1em;\n}\n\n.myForm>button {\n  grid-row: controls;\n  grid-row: auto;\n  border: none;\n  padding: 1em;\n}\n\n.button {\n  margin: 8px;\n  padding: 3px 10px 3px 10px;\n}\n\n.div2 {\n  background: lightseagreen;\n}\n",
                    "styleUrl": "./register.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"grid-container\">\n  <div class=\"login\">\n    <p tabindex=\"0\">Sign up</p>\n  </div>\n  <div class=\"grid-containers\">\n    <form [formGroup]=\"registerForm\" class=\"forms\">\n      <label tabindex=\"1\" for=\"username\">UserName :</label>\n      <input\n        type=\"text\"\n        formControlName=\"username\"\n        name=\"username\"\n        tabindex=\"2\"\n        placeholder=\"Please Enter Name\"\n        autocomplete=\"off\"\n        aria-label=\"User Name\"\n      />\n\n      <label tabindex=\"3\" for=\"password\">Password :</label>\n      <input\n        type=\"password\"\n        tabindex=\"4\"\n        formControlName=\"password\"\n        name=\"password\"\n        placeholder=\"Please Enter Password\"\n        autocomplete=\"off\"\n        aria-label=\"Password\"\n      />\n    </form>\n  </div>\n  <div class=\"div2\">\n    <button\n      type=\"button\"\n      class=\"button\"\n      tabindex=\"5\"\n      [disabled]=\"registerForm.invalid\"\n      (click)=\"onSubmit(registerForm.value)\"\n      aria-label=\"Add User\"\n    >\n      Add User\n    </button>\n    <button type=\"button\" class=\"button\" tabindex=\"6\" aria-label=\"reset\">\n      Reset\n    </button>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddLinksComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LinksComponent"
                        },
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterModules",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RegisterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Add link'"
            },
            {
                "name": "ADD_LINKS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Add link success'"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DELETE_LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Delete link'"
            },
            {
                "name": "DELETE_LINKS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Delete link success'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseRefUrl : 'http://localhost:3000'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  baseRefUrl : 'http://localhost:3000'\n}"
            },
            {
                "name": "header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initializeState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "(): LinkState => {\n  return { Link: Array<ILink>() };\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\n  isAuthenticated: false,\n  user: null,\n  errorMessage: null,\n  links: [],\n  added: null,\n  updated: null,\n  loaded: null,\n  deleted: null,\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "links",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/links/links.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] List Success'"
            },
            {
                "name": "LIST_LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Fetch link'"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login/login.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/lit-Elements/heading-element.ts",
                "type": "",
                "defaultValue": "css`white`"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\n  auth: auth.reducer,\n  link: auth.reducer,\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectLinkState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/links/links.stories.ts",
                "type": "Story<LinksComponent>",
                "defaultValue": "(args: LinksComponent) => ({\r\n  component: LinksComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login/login.stories.ts",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args: LoginComponent) => ({\r\n  component: LoginComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.stories.ts",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Update link'"
            },
            {
                "name": "UPDATE_LINKS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.action.ts",
                "type": "string",
                "defaultValue": "'[Links] Update link success'"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | ListLinks | ListDataSuccess | AddLinks | AddLinksSuccess | UpdateLinks | UpdateLinksSuccess | DeleteLinks | DeleteLinksSuccess",
                "file": "src/app/store/actions/auth.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Sighup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Sighup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Sighup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.action.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "ADD_LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Add link'"
                },
                {
                    "name": "ADD_LINKS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Add link success'"
                },
                {
                    "name": "DELETE_LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Delete link'"
                },
                {
                    "name": "DELETE_LINKS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Delete link success'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] List Success'"
                },
                {
                    "name": "LIST_LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Fetch link'"
                },
                {
                    "name": "UPDATE_LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Update link'"
                },
                {
                    "name": "UPDATE_LINKS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.action.ts",
                    "type": "string",
                    "defaultValue": "'[Links] Update link success'"
                }
            ],
            "src/app/app.stories.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.stories.ts",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseRefUrl : 'http://localhost:3000'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  baseRefUrl : 'http://localhost:3000'\n}"
                }
            ],
            "src/app/components/header/header.stories.ts": [
                {
                    "name": "header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "initializeState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "(): LinkState => {\n  return { Link: Array<ILink>() };\n}"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\n  auth: auth.reducer,\n  link: auth.reducer,\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectLinkState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\n  isAuthenticated: false,\n  user: null,\n  errorMessage: null,\n  links: [],\n  added: null,\n  updated: null,\n  loaded: null,\n  deleted: null,\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/app/components/links/links.stories.ts": [
                {
                    "name": "links",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/links/links.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/links/links.stories.ts",
                    "type": "Story<LinksComponent>",
                    "defaultValue": "(args: LinksComponent) => ({\r\n  component: LinksComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/app/components/login/login.stories.ts": [
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login/login.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login/login.stories.ts",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args: LoginComponent) => ({\r\n  component: LoginComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/lit-Elements/heading-element.ts": [
                {
                    "name": "mainColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/lit-Elements/heading-element.ts",
                    "type": "",
                    "defaultValue": "css`white`"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Sighup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Sighup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Sighup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.action.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.action.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut | ListLinks | ListDataSuccess | AddLinks | AddLinksSuccess | UpdateLinks | UpdateLinksSuccess | DeleteLinks | DeleteLinksSuccess",
                    "file": "src/app/store/actions/auth.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/links/add-links/addlinks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddLinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/links/links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/links/links.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "links",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/links/links.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lit-Elements/footer.element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FooterElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lit-Elements/heading-element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderTitleElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lit-Elements/heading-element.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/registration/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/registration/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/service/sports.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LinksListService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddLinks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddLinksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLinks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLinksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListLinks",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLinks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLinksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_LINKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_LINKS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_LINKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_LINKS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_LINKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_LINKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_LINKS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initializeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLinkState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILink",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}